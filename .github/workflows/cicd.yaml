name: CI/CD for .NET Core 8.0 Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET
    - name: Setup .NET Core 8.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.100

    # Install dotnet-sonarscanner
    - name: Install SonarScanner
      run: dotnet tool install --global dotnet-sonarscanner

    # Install Coverlet.Console globally
    - name: Install Coverlet.Console
      run: dotnet tool install --global coverlet.console

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore SneakerSZN/SneakerSZN.sln

    # Begin SonarQube Analysis
    - name: Begin SonarQube Analysis
      env:
        PATH: $PATH:/home/runner/.dotnet/tools
      run: |
        dotnet sonarscanner begin /k:"Deantjeee_SneakerSZN-Backend" \
          /d:sonar.organization="deantjeee" \
          /d:sonar.host.url="https://sonarcloud.io" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="TestResults/coverage.xml"

    # Build the project
    - name: Build the project
      run: dotnet build SneakerSZN/SneakerSZN.sln --no-incremental

    # Run tests and collect coverage
    - name: Run Tests and Collect Coverage
      env:
        PATH: $PATH:/home/runner/.dotnet/tools
      run: |
        mkdir -p TestResults
        coverlet SneakerSZN/SneakerSZN.Tests/bin/Debug/net8.0/SneakerSZN.Tests.dll \
          --target "dotnet" \
          --targetargs "test --no-build" \
          -f opencover \
          -o TestResults/coverage.xml

    # End SonarQube Analysis
    - name: End SonarQube Analysis
      env:
        PATH: $PATH:/home/runner/.dotnet/tools
      run: |
        dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push Docker image
    - name: Build and Push Docker Image
      run: |
        docker build -t deanmichiels/sneakerbackend:latest -f SneakerSZN/SneakerSZN/Dockerfile SneakerSZN
        docker push deanmichiels/sneakerbackend:latest
