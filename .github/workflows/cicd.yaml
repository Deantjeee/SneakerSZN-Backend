name: CI/CD for .NET Core 8.0 Backend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Set up .NET
    - name: Setup .NET Core 8.0
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.100

    # Install Tools
    - name: Install Coverlet, SonarScanner, and ReportGenerator
      run: |
        dotnet tool install --global coverlet.console
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore SneakerSZN/SneakerSZN.sln

    # Begin SonarQube Analysis
    - name: SonarQube Analysis Begin
      run: |
        dotnet sonarscanner begin /k:"Deantjeee_SneakerSZN-Backend" \
          /o:"deantjeee" \
          /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.cs.opencover.reportsPaths="TestResults/**/coverage.cobertura.xml" \
          /d:sonar.exclusions="**/bin/**,**/obj/**,**/TestResults/**,**/*.g.cs,**/*.Designer.cs"

    # Build the solution
    - name: Build the solution
      run: dotnet build SneakerSZN/SneakerSZN.sln --no-incremental --configuration Release

    # Run Tests with Coverage
    - name: Run Tests with Coverage
      run: |
        dotnet test SneakerSZN/SneakerSZN.sln \
          --no-build \
          --configuration Release \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults
        ~/.dotnet/tools/reportgenerator \
          -reports:"TestResults/**/coverage.cobertura.xml" \
          -targetdir:"./CoverageReports" \
          -reporttypes:HtmlInline_AzurePipelines

    # End SonarQube Analysis
    - name: SonarQube Analysis End
      run: |
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

    # Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push Docker image
    - name: Build and Push Docker Image
      run: |
        docker build -t deanmichiels/sneakerbackend:latest -f SneakerSZN/SneakerSZN/Dockerfile SneakerSZN
        docker push deanmichiels/sneakerbackend:latest
